{
  "name": "01-ciba-request",
  "baseURI": "https://openam-tenaris-demo.forgeblocks.com",
  "condition": "${matches(request.uri.path, '^/ciba-request')}",
  "handler": "Chain-1",
  "properties": {
    "ciba_iss": "seboot-ciba",
    "ciba_aud": "https://openam-tenaris-demo.forgeblocks.com:443/am/oauth2/alpha",
    "ciba_acr": "push",
    "jwk_uri": "https://openam-tenaris-demo.forgeblocks.com/am/oauth2/alpha/connect/jwk_uri",
    "ciba_client_secret": "ForgeRock",
    "authzHeader": "seboot-ciba:ForgeRock",
    "bcEndPointURL": "https://openam-tenaris-demo.forgeblocks.com/am/oauth2/realms/root/realms/alpha/bc-authorize",
    "bcAuthorizeURL": "https://openam-tenaris-demo.forgeblocks.com/am/oauth2/alpha/bc-authorize"
  },
  "heap": [
    {
      "type": "BaseUriDecorator",
      "name": "baseUri"
    },
    {
      "type": "TimerDecorator",
      "name": "timer",
      "config": {
        "timeUnit": "ms"
      }
    },
    {
      "type": "CaptureDecorator",
      "name": "capture",
      "config": {
        "captureEntity": false,
        "captureContext": false,
        "maxEntityLength": 524288
      }
    },
    {
      "name": "Chain-1",
      "type": "Chain",
      "config": {
        "handler": "CIBAResponseHandler",
        "filters": [
          "prepare_ciba_request",
          "Build Signed CIBA JWT Request",
          "SendCIBAJWTRequest"
        ]
      }
    },
    {
      "type": "ScriptableFilter",
      "name": "prepare_ciba_request",
      "config": {
        "type": "application/x-groovy",
        "source": [
          "import groovy.json.JsonBuilder",
          "",
          "int exp = (int)(new Date().getTime() / 1000) + 600",
          "",
          "def login_hint = request.getEntity().getJson().get(\"login_hint\")",
          "",
          "def cibaRequest = [",
          "\t\"aud\": aud,",
          "    \"iss\": issuer,",
          "  \t\"exp\": exp,",
          "  \t\"acr_values\": acr_values,",
          "    \"login_hint\": login_hint,",
          "    \"scope\": \"openid profile\",",
          "  \t\"binding_message\": \"Allow Vault Openning for user \" + login_hint",
          "]",
          "",
          "JsonBuilder builder = new JsonBuilder(cibaRequest)",
          "",
          "println \"The Ciba Request is \" + builder.toPrettyString()",
          "",
          "contexts.attributes.attributes.aud = cibaRequest.aud",
          "contexts.attributes.attributes.iss = cibaRequest.iss",
          "contexts.attributes.attributes.exp = cibaRequest.exp",
          "contexts.attributes.attributes.acr_values = cibaRequest.acr_values",
          "contexts.attributes.attributes.scope = cibaRequest.scope",
          "contexts.attributes.attributes.login_hint = cibaRequest.login_hint",
          "contexts.attributes.attributes.binding_message = cibaRequest.binding_message",
          "",
          "return next.handle(context, request)"
        ],
        "args": {
          "aud": "${ciba_aud}",
          "issuer": "${ciba_iss}",
          "acr_values": "${ciba_acr}"
        }
      }
    },
    {
      "name": "Build Signed CIBA JWT Request",
      "type": "JwtBuilderFilter",
      "config": {
        "template": {
          "login_hint": "${contexts.attributes.attributes.login_hint}",
          "aud": "${contexts.attributes.attributes.aud}",
          "iss": "${contexts.attributes.attributes.iss}",
          "acr_values": "${contexts.attributes.attributes.acr_values}",
          "exp": "${contexts.attributes.attributes.exp}",
          "scope": "${contexts.attributes.attributes.scope}",
          "binding_message": "${contexts.attributes.attributes.binding_message}"
        },
        "secretsProvider": {
          "name": "JwkSetSecretStore-1",
          "type": "JwkSetSecretStore",
          "config": {
            "jwkUrl": "https://tenaris-bl.catalyst.forgerock.org/ciba-jwk"
          }
        },
        "signature": {
          "secretId": "myKey",
          "algorithm": "ES256"
        }
      }
    },
    {
      "type": "ScriptableFilter",
      "name": "SendCIBAJWTRequest",
      "config": {
        "type": "application/x-groovy",
        "source": [
          "import groovy.json.JsonSlurper",
          "import groovy.json.JsonBuilder",
          "",
          "",
          "println \"Signed JWT is \" + contexts.jwtBuilder.value",
          "",
          "String basicAuth = \"${basicAuthzHdr}\".bytes.encodeBase64().toString()",
          "String data = \"request=${contexts.jwtBuilder.value}\"",
          "def connection = new URL(bcAuthorizeEndPoint)",
          "def auth_req_resp = connection.openConnection().with {",
          "  setRequestMethod(\"POST\")",
          "  doOutput = true",
          "  setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\")",
          "  setRequestProperty(\"Authorization\", \"Basic ${basicAuth}\")",
          "  outputStream.withWriter {writer ->",
          "    writer << data",
          "  }",
          "  inputStream.withCloseable { inStream ->",
          "    new JsonSlurper().parse(inStream as InputStream)",
          "  }",
          "}",
          "",
          "JsonBuilder builder = new JsonBuilder(auth_req_resp)",
          "",
          "println \"Response from CIBA Request \" + builder.toPrettyString()",
          "",
          "def auth_req_id = auth_req_resp.auth_req_id",
          "def expires_in = auth_req_resp.expires_in",
          "def interval = auth_req_resp.interval",
          "",
          "contexts.attributes.attributes.auth_req_id =  auth_req_id",
          "contexts.attributes.attributes.expires_in =  expires_in",
          "contexts.attributes.attributes.interval = interval",
          "",
          "return next.handle(context, request)"
        ],
        "args": {
          "basicAuthzHdr": "${authzHeader}",
          "bcAuthorizeEndPoint": "${bcAuthorizeURL}"
        }
      }
    },
    {
      "type": "StaticResponseHandler",
      "name": "CIBAResponseHandler",
      "config": {
        "status": 200,
        "reason": "OK",
        "entity": "{\n  \"auth_req_id\": \"${contexts.attributes.attributes.auth_req_id}\",\n  \"expires_in\": \"${contexts.attributes.attributes.expires_in}\",\n  \"interval\": \"${contexts.attributes.attributes.interval}\"\n}",
        "headers": {
          "Content-Type": [
            "application/json"
          ]
        }
      }
    }
  ]
}