{
  "name": "01-bancolombia-fapi-balances",
  "baseURI": "https://gw-lab-dev.apps.ambientesbc.lab",
  "condition": "${find(request.uri.path, '^/rs/laboratorio/laboratorio/open-banking/v1/deposits/accounts')}",
  "handler": "Chain-1",
  "properties": {
    "sapig_agent_username": "ig_agent",
    "sapig_agent_password": "Il0hCBe!2!4",
    "tenantURL": "https://openam-bcolpoc.forgeblocks.com",
    "idmAdminAccessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJjOWY5ODkwYy0wZDAyLTRiMTUtODcwYS0wMzJiYzM4YjMzZTIiLCJjdHMiOiJPQVVUSDJfU1RBVEVMRVNTX0dSQU5UIiwiYXVkaXRUcmFja2luZ0lkIjoiYTUzM2VlNTgtNTAyMy00ZjM3LWFjMTAtMGZiM2RkYjdjZTRiLTI0NjEyNjIiLCJzdWJuYW1lIjoiYzlmOTg5MGMtMGQwMi00YjE1LTg3MGEtMDMyYmMzOGIzM2UyIiwiaXNzIjoiaHR0cHM6Ly9vcGVuYW0tYmNvbHBvYy5mb3JnZWJsb2Nrcy5jb206NDQzL2FtL29hdXRoMi9yZWFsbXMvcm9vdC9yZWFsbXMvYWxwaGEiLCJ0b2tlbk5hbWUiOiJhY2Nlc3NfdG9rZW4iLCJ0b2tlbl90eXBlIjoiQmVhcmVyIiwiYXV0aEdyYW50SWQiOiJUY20xMi0wUlVOaUlpMGR1YVJMOVFieEt3WWMiLCJhdWQiOiJjOWY5ODkwYy0wZDAyLTRiMTUtODcwYS0wMzJiYzM4YjMzZTIiLCJuYmYiOjE3MjIyNzEwMTEsImdyYW50X3R5cGUiOiJjbGllbnRfY3JlZGVudGlhbHMiLCJzY29wZSI6WyJmcjppZG06KiJdLCJhdXRoX3RpbWUiOjE3MjIyNzEwMTEsInJlYWxtIjoiL2FscGhhIiwiZXhwIjoyMDM3NjMxMDExLCJpYXQiOjE3MjIyNzEwMTEsImV4cGlyZXNfaW4iOjMxNTM2MDAwMCwianRpIjoibURSSnRHTG04QnRNeG80a1RxRkluR0tkTnBZIn0.hnMH4FcJWrMWmbXuOa7wApzJ9bORgbTBqNqDScIGYKM"
  },
  "heap": [
    {
      "name": "TrustAllManager-1",
      "type": "TrustAllManager"
    },
    {
      "name": "ReverseProxyHandler",
      "type": "ReverseProxyHandler",
      "config": {
        "tls": {
          "type": "ClientTlsOptions",
          "config": {
            "trustManager": "TrustAllManager-1",
            "hostnameVerifier": "ALLOW_ALL"
          }
        }
      }
    },
    {
      "type": "BaseUriDecorator",
      "name": "baseUri"
    },
    {
      "type": "TimerDecorator",
      "name": "timer",
      "config": {
        "timeUnit": "ms"
      }
    },
    {
      "type": "CaptureDecorator",
      "name": "capture",
      "config": {
        "captureEntity": false,
        "captureContext": false,
        "maxEntityLength": 524288
      }
    },
    {
      "type": "Base64EncodedSecretStore",
      "name": "Base64EncodedSecretStore-1",
      "config": {
        "secrets": {
          "agent.password": "SWxvaGNiZTIxMDc="
        }
      }
    },
    {
      "name": "Chain-1",
      "type": "Chain",
      "config": {
        "handler": "ReverseProxyHandler",
        "filters": [
          "RouteMetricsFilter-1",
          "CertificateThumbprintFilter-1",
          "OAuth2ResourceServerFilter-1",
          "Grant Type Verifier",
          "Get Account from URI Path",
          "GetTPPApplicationRecord",
          "GetTPPConsentFromIDM",
          "Authorized API call with Consent",
          "Add API Connect Headers",
          "Remove SAPIG Pre-Fixes"
        ]
      }
    },
    {
      "type": "ScriptableFilter",
      "name": "Get Account from URI Path",
      "config": {
        "type": "application/x-groovy",
        "source": [
          "def chunks = request.uri.path.split(\"/\")",
          "",
          "def accountNumber = chunks[chunks.length - 2]",
          "println \"ALEXLOG: Account Number from URI is ${accountNumber}\"",
          "",
          "contexts.attributes.attributes.acctNumber = accountNumber",
          "",
          "return next.handle(context, request)"
        ]
      }
    },
    {
      "type": "ScriptableFilter",
      "name": "GetTPPApplicationRecord",
      "config": {
        "type": "application/x-groovy",
        "source": [
          "import org.forgerock.http.protocol.Request",
          "import org.forgerock.util.AsyncFunction",
          "import org.forgerock.util.promise.Promise",
          "",
          "String clientId = contexts.oauth2.accessToken.info['aud']",
          "",
          "println \"ALEXLOG: Client ID is ${clientId}\"",
          "",
          "String _queryFilter = \"client_id eq \\\"${clientId}\\\"\"",
          "String idmAuthzHeader = \"Bearer \" + oauthAdminAccessToken",
          "Request idmRequest = new Request()",
          "",
          ".setUri(new URI(\"${amURL}/openidm/managed/TPPApplication?_queryFilter=${URLEncoder.encode(_queryFilter, \"UTF-8\")}&_fields=*\"))",
          ".setMethod(\"GET\")",
          "idmRequest.getHeaders().add('Authorization', idmAuthzHeader)",
          "",
          "return http.send(idmRequest).thenAsync( new AsyncFunction() {",
          "  Promise apply (response) {",
          "    if (response.status == Status.OK) {",
          "      println \"ALEXLOG: RESPONSE is ${response.entity.json}\"",
          "      contexts.attributes.attributes.apiConnectClientId = response.entity.json.result[0].apiConnectClientID",
          "      contexts.attributes.attributes.apiConnectClientSecret = response.entity.json.result[0].apiConnectClientSecret",
          "      println \"ALEXLOG: API Connect Client ID ${contexts.attributes.attributes.apiConnectClientId} : Client Secret ${contexts.attributes.attributes.apiConnectClientSecret}\"",
          "      return next.handle(context, request)",
          "    } else {",
          "      contexts.attributes.attributes.status = response.status",
          "      contexts.attributes.attributes.errorMessage = response.entity.json.message",
          "      return errorResponse.handle(context, request)",
          "    }",
          "  }",
          "})",
          ""
        ],
        "args": {
          "amURL": "${tenantURL}",
          "oauthAdminAccessToken": "${idmAdminAccessToken}",
          "errorResponse": "${heap['RouteErrorResponse']}"
        }
      }
    },
    {
      "type": "ScriptableFilter",
      "name": "GetTPPConsentFromIDM",
      "config": {
        "type": "application/x-groovy",
        "source": [
          "import org.forgerock.http.protocol.Request",
          "import org.forgerock.util.AsyncFunction",
          "import org.forgerock.util.promise.Promise",
          "import groovy.json.JsonBuilder",
          "import groovy.json.JsonSlurper",
          "",
          "def claimsObj = new JsonSlurper().parseText(contexts.oauth2.accessToken.info[\"claims\"])",
          "",
          "String intentId = claimsObj.id_token.openbanking_intent_id.value",
          "",
          "println \"ALEXLOG: Intent ID is ${intentId}\"",
          "String idmAuthzHeader = \"Bearer \" + oauthAdminAccessToken",
          "Request idmRequest = new Request()",
          ".setUri(new URI(\"${amURL}/openidm/${intentId}?_fields=*,*_ref/*/*\"))",
          ".setMethod(\"GET\")",
          "idmRequest.getHeaders().add('Authorization', idmAuthzHeader)",
          "",
          "return http.send(idmRequest).thenAsync( new AsyncFunction() {",
          "  Promise apply (response) {",
          "    if (response.status == Status.OK) {",
          "      println \"ALEXLOG: RESPONSE is ${response.entity.json}\"",
          "      def accountAccessConsent = response.entity.json",
          "      JsonBuilder builder = new JsonBuilder(accountAccessConsent)",
          "      println \"ALEXLOG: Consent Object retrieved is ${builder.toPrettyString()}\"",
          "      contexts.attributes.attributes.tppConsent = builder.toPrettyString()",
          "      return next.handle(context, request)",
          "    } else {",
          "      contexts.attributes.attributes.status = response.status",
          "      contexts.attributes.attributes.errorMessage = response.entity.json.message",
          "      return errorResponse.handle(context, request)",
          "    }",
          "  }",
          "})"
        ],
        "args": {
          "amURL": "${tenantURL}",
          "oauthAdminAccessToken": "${idmAdminAccessToken}",
          "errorResponse": "${heap['RouteErrorResponse']}"
        }
      }
    },
    {
      "name": "Authorized API call with Consent",
      "type": "PolicyEnforcementFilter",
      "config": {
        "amService": "AmService-1",
        "pepRealm": "/alpha",
        "claimsSubject": {
          "sub": "${contexts.oauth2.accessToken.info.sub}",
          "iss": "${contexts.oauth2.accessToken.info.iss}"
        },
        "cache": {
          "enabled": false
        },
        "application": "data",
        "environment": {
          "acctNumber": [
            "${contexts.attributes.attributes.acctNumber}"
          ],
          "tppConsent": [
            "${contexts.attributes.attributes.tppConsent}"
          ]
        }
      }
    },
    {
      "name": "Add API Connect Headers",
      "type": "HeaderFilter",
      "config": {
        "messageType": "REQUEST",
        "add": {
          "Client-Id": [
            "${contexts.attributes.attributes.apiConnectClientId}"
          ],
          "Client-Secret": [
            "${contexts.attributes.attributes.apiConnectClientSecret}"
          ],
          "accept": [
            "application/vnd.bancolombia.v4+json"
          ]
        }
      }
    },
    {
      "name": "Remove SAPIG Pre-Fixes",
      "type": "UriPathRewriteFilter",
      "config": {
        "mappings": {
          "/rs": "/"
        }
      }
    },
    {
      "name": "AmService-1",
      "type": "AmService",
      "config": {
        "url": "https://openam-bcolpoc.forgeblocks.com/am",
        "realm": "/alpha",
        "ssoTokenHeader": "afce4c9e957c7bf",
        "secretsProvider": "Base64EncodedSecretStore-1",
        "agent": {
          "username": "sapig",
          "passwordSecretId": "agent.password"
        },
        "sessionCache": {
          "enabled": false
        }
      }
    },
    {
      "name": "RouteMetricsFilter-1",
      "type": "RouteMetricsFilter"
    },
    {
      "name": "CertificateThumbprintFilter-1",
      "type": "CertificateThumbprintFilter",
      "config": {
        "certificate": "${pemCertificate(urlDecode(request.headers['ssl-client-cert'][0]))}",
        "failureHandler": {
          "type": "ScriptableHandler",
          "config": {
            "type": "application/x-groovy",
            "file": "ReturnInvalidCnfKeyError.groovy"
          }
        }
      }
    },
    {
      "name": "OAuth2ResourceServerFilter-1",
      "type": "OAuth2ResourceServerFilter",
      "config": {
        "scopes": [
          "accounts"
        ],
        "requireHttps": false,
        "realm": "OpenIG",
        "accessTokenResolver": {
          "comment": "Check certificate-bound OAuth 2.0 bearer tokens presented by clients use the same mTLS-authenticated HTTP connection",
          "type": "ConfirmationKeyVerifierAccessTokenResolver",
          "config": {
            "delegate": {
              "name": "token-resolver-1",
              "type": "StatelessAccessTokenResolver",
              "config": {
                "secretsProvider": "SecretsProvider-AmJWK",
                "issuer": "https://&{ig.fqdn}/am/oauth2/realms/root/realms/&{am.realm}",
                "verificationSecretId": "any.value.in.regex.format"
              }
            }
          }
        }
      }
    },
    {
      "name": "Grant Type Verifier",
      "type": "ScriptableFilter",
      "config": {
        "type": "application/x-groovy",
        "file": "GrantTypeVerifier.groovy",
        "args": {
          "allowedGrantType": "authorization_code"
        }
      }
    },
    {
      "type": "StaticResponseHandler",
      "name": "PolicyDeniedErrorHandler",
      "config": {
        "status": 401,
        "entity": "{\n  \"code\": 401,\n  \"error\": \"The access was denied.\"\n}",
        "headers": {
          "Content-Type": [
            "application/json"
          ]
        }
      }
    },
    {
      "type": "StaticResponseHandler",
      "name": "RouteErrorResponse",
      "config": {
        "status": 500,
        "entity": "{\n  \"code\": 500,\n  \"error\": \"${contexts.attributes.attributes.errorMessage}\"\n}",
        "headers": {
          "Content-Type": [
            "application/json"
          ]
        }
      }
    }
  ]
}